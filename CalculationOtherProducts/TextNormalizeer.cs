using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace CalculationOtherProducts
{

    /** Нормализация строк.
     *
     *  Нормализация представляет собой приведение строки к виду, который минимизирует
     *  количество возможных опечаток. Например, несколко последовательно идущих пробелов
     *  приводятся к одному пробелу, буква О приводится к цифре 0 и т.п.
     *
     *  Используется при сравнении строк. Пусть S1 и S2 - строки, а S1' и S2' - их
     *  нормелизованные формы. Тогда если S1' = S2', но S1 != S2, строки S1  и S2
     *  различны в результате опечатки (например, вместо цифры 0 имеется буква О)
     */
    public class TextNormalizer
    {
        // Все замены нормализации, кроме смены регистра, реализованы в виде
        // регулярных выражений. Приведение сроки к нижнему регистру выполняется
        // перед применение регулярных выражений.
        //
        // ВНИМАНИЕ! После выполнения импорта править эти правила нельзя.
        static readonly string[,] _normalizationReplaces = {

            // Замена латинских букв на сходные по начертанию русские.
            // При этом учитывается сходство не только строчных букв, но и заглавных.
            {@"a(?=.*[а-я])|(?<=[а-я].*)a", "а"},
            {@"b(?=.*[а-я])|(?<=[а-я].*)b", "в"}, // 'B', 'В'
            {@"c(?=.*[а-я])|(?<=[а-я].*)c", "с"},
            {@"e(?=.*[а-я])|(?<=[а-я].*)e", "е"},
            {@"h(?=.*[а-я])|(?<=[а-я].*)h", "н"}, // 'H', 'Н'
            {@"k(?=.*[а-я])|(?<=[а-я].*)k", "к"},
            {@"m(?=.*[а-я])|(?<=[а-я].*)m", "м"}, // 'M', 'М'
            {@"n(?=.*[а-я])|(?<=[а-я].*)n", "п"},
            {@"о(?=.*[а-я])|(?<=[а-я].*)о", "о"},
            {@"p(?=.*[а-я])|(?<=[а-я].*)p", "р"},
            {@"t(?=.*[а-я])|(?<=[а-я].*)t", "т"}, // 'T', 'Т'
            {@"x(?=.*[а-я])|(?<=[а-я].*)x", "х"},

            // Замена примыкающей к цифре справа латинской или кириллической буквы о на цифру 0
            // Пример: 1О -> 10
            {@"(?<=[0-9][o\u043e]*)[o\u043e]", "0"},

            // Замена примыкающей к цифре слева латинской или кириллической буквы о на цифру 0
            // Пример: O1 -> 01
            {@"[o\u043e](?=[o\u043e]*[0-9])", "0"},

            // Замена примыкающей находящихся между буквами нуля или латинской О на кириллическую О
            // Пример: лмн0пр -> лмнопр
            {@"(?<=\p{Ll}[0o]*)[0o](?=[0o]*\p{Ll})", "\u043e"}, // Cyrillic Small Letter O

            // Замена первой в строке 0 или латинской О, примыкающей к букве, на кириллическую О
            // Пример: 0пр -> опр
            {@"^[0o](?=[0o]*\p{Ll})", "\u043e"}, // Cyrillic Small Letter O

             //Замена г0 на го
            {@"(?<=г0*)[0]","\u043e"},
            //Замена бк0 на бко
            {@"(?<=бк0*)[0]","\u043e"},
              //Замена мп0 на мпо
            {@"(?<=мп0*)[0]","\u043e"},
             //Замена КРЮМ0 на КРЮМО
            {@"(?<=крюм0*)[0]","\u043e"},
             //Замена АГ0 на АГО
            {@"(?<=аг0*)[0]","\u043e"},
            //Замена РФ0 на РФО
            {@"(?<=рф0*)[0]","\u043e"},
             //Замена ОЮ0 на ОЮО
            {@"(?<=ою0*)[0]","\u043e"},
             //Замена ОЖ0 на ОЖО
            {@"(?<=ож0*)[0]","\u043e"},
             //Замена ЯЛ0 на ЯЛО
            {@"(?<=ял0*)[0]","\u043e"},
             //Замена аА0 на аАО
            {@"(?<=аа0*)[0]","\u043e"},
             //Замена ДЛТ0 на ДЛТО
            {@"(?<=длт0*)[0]","\u043e"},
             //Замена ДЕГ0 на ДЕГО
            {@"(?<=дег0*)[0]","\u043e"},
             //Замена ТТ0 на ТТО
            {@"(?<=тт0*)[0]","\u043e"},
             //Замена СБ0 на СБО
            {@"(?<=сб0*)[0]","\u043e"},
             //Замена ГЕ0 на ГЕО
            {@"(?<=ге0*)[0]","\u043e"},
             //Замена НЩ0 на НЩО
            {@"(?<=нщ0*)[0]","\u043e"},
             //Замена ВР0 на ВРО
            {@"(?<=вр0*)[0]","\u043e"},
             //Замена РС0 на РСО
            {@"(?<=рс0*)[0]","\u043e"},
             //Замена ЩТ0 на ЩТО
            {@"(?<=щт0*)[0]","\u043e"},
              //Замена ПК0 на ПКО
            {@"(?<=пк0*)[0]","\u043e"},
             //Замена ды0 на дыО
            {@"(?<=ды0*)[0]","\u043e"},
             //Замена фы0 на фыО
            {@"(?<=фы0*)[0]","\u043e"},
             //Замена щы0 на щыО
            {@"(?<=щы0*)[0]","\u043e"},
             //Замена бр0 на брО
            {@"(?<=бр0*)[0]","\u043e"},
             //Замена ав0 на авО
            {@"(?<=ав0*)[0]","\u043e"},
            //Замена аЦ0 на аЦО
            {@"(?<=ац0*)[0]","\u043e"},
            //Замена ШЖ0 на ШЖО
            {@"(?<=шж0*)[0]","\u043e"},
            
            // Замена последней в строке 0 или латинской О, примыкающей к букве, на кириллическую О
            // Пример: лмн0 -> лмно
            {@"(?<=\p{Ll}[0o]*)[0o]$", "\u043e"}, // Cyrillic Small Letter O

            // Замена одиноко стоящих последовательностей o на 0
            // Пример: А.ОО.Б -> А.00.Б
            {@"(?<=\W[o\u043e]*)[o\u043e](?=[o\u043e]*\W)", "0"},
            {@"^[o\u043e](?=[o\u043e]*\W)", "0"},
            {@"(?<=\W[o\u043e]*)[o\u043e]$", "0"},

            // Замена латинской I на 1
            {@"i", "1"},

            // Замена кириллической П на 11 (частто вместо римской II пишут П)
            {@"п", "11"},

            // Замена кириллической Ш на 111 (частто вместо римской III пишут Ш)
            {@"ш", "111"},

            // Замена латинской х, кириллической х или звездочки *, находящихся между цифрами и, возможно,
            // отбитых пробелами на знак подчеркивания _
            // Пример: 10 x 16 -> 10_16
            {@"(?<=[0-9])\s*[xх\*×]\s*(?=[0-9])", "_"},

            // Удаление специальных символов в начале строки
            {@"^\W+", ""},

            // Удаление специальных символов в конце строки
            {@"\W+$", ""},

            // Удаление специальных символов между буквами
            {@"(?<=\p{Ll})\W+(?=\p{Ll})", ""},

            // Удаление специальных символов между буквой и цифрой
            {@"(?<=\p{Ll})\W+(?=[0-9])", ""},

            // Удаление специальных символов между цифрой и буквой
            {@"(?<=[0-9])\W+(?=\p{Ll})", ""},

            // Удаление специальных символов между цифрами
            {@"(?<=[0-9])\W+(?=[0-9])", "_"},

            // Удаление остальных неизвестных символов
            {@"[^а-яa-z_0-9]", ""},

        };

        static readonly Dictionary<Regex, string> _replaces;

        static TextNormalizer()
        {
            _replaces = new Dictionary<Regex, string>();
            int lowerBound = _normalizationReplaces.GetLowerBound(0);
            int upperBound = _normalizationReplaces.GetUpperBound(0);
            for (int i = lowerBound; i <= upperBound; ++i)
            {
                Regex re = new Regex(_normalizationReplaces[i, 0], RegexOptions.Compiled);
                _replaces.Add(re, _normalizationReplaces[i, 1]);
            }
        }

        //* Получение нормальной формы строки
        public string GetNormalForm(string text)
        {
            // Преобразование к нижнему регистру
            string normal = text.ToLower();

            // Применение замен нормализации
            foreach (KeyValuePair<Regex, string> pair in _replaces)
            {
                Regex regex = pair.Key;
                string replaced = regex.Replace(normal, pair.Value);
                normal = replaced;
            }

            return normal;
        }

    }
}




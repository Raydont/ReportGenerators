using Microsoft.Office.Interop.Excel;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using TFlex.DOCs.Model;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Mail;
using TFlex.DOCs.Model.References;
using TFlex.DOCs.Model.References.Nomenclature;

namespace TPPDataGenerator
{
    public class TPPDataGenerator
    {
        #region Обработка объекта справочника Номенклатура и изделия (новая КД)
        public static void GenerateFromNomenclature(MacroProvider macro)
        {
            var текущийОбъект = macro.ТекущийОбъект;
            var типыНоменклатуры = new List<Guid> { Guids.Номенклатура.Типы.комплект,
                                                    Guids.Номенклатура.Типы.сборочнаяЕдиница,
                                                    Guids.Номенклатура.Типы.деталь };
            var reader = new DataReader(macro);
            var maker = new ReportMaker(macro);

            var номенклатураInfo = ServerGateway.Connection.ReferenceCatalog.Find(Guids.Номенклатура.id);
            var номенклатураСправочник = номенклатураInfo.CreateReference();
            var связьТехПроцессы = номенклатураСправочник.LoadSettings.AddRelation(Guids.Номенклатура.Связи.техПроцессы);

            var корневойОбъект = (ReferenceObject)текущийОбъект;
            var обозначениеКорневогоОбъекта = корневойОбъект[Guids.Номенклатура.Поля.обозначение].GetString();
            // Поиск в логах запуска, запускалась ли проверка по этому объекту ранее
            var объектЛога = macro.НайтиОбъект(Guids.ЛогЗапусков.id.ToString(), String.Format("{0} = {1} И {2} = '{3}'", 
                                               Guids.ЛогЗапусков.Поля.этоИзвещение.ToString(), false,
                                               Guids.ЛогЗапусков.Поля.обозначение, обозначениеКорневогоОбъекта));
            if (объектЛога != null)
            {
                if (!macro.Вопрос("По объекту " + обозначениеКорневогоОбъекта + " проверка ранее уже запускалась." +
                             "\r\nБудет сделан только отчет без установки флагов.\r\nХотите продолжить?"))
                {
                    return;
                }
            }

            var объектыИерархии = new List<ReferenceObject>();
            var диалогОжидания = macro.ДиалогОжидания;

            #region Создание диалога ввода
            var диалогВвода = macro.СоздатьДиалогВвода("Введите параметры проверки / отчета");

            var толькоОтчет = false;
            var направитьПоПочте = false;
            var отменитьВыполнение = false;

            var направитьПоПочтеСтрока = "Направить данные в отдел 60";
            var толькоОтчетСтрока = "Только отчет";
            var отчетИОбработкаСтрока = "Отчет и установка признаков неактуальности ТП";

            диалогВвода.ДобавитьГруппу("Режим отчета");
            диалогВвода.ДобавитьФлаг(отчетИОбработкаСтрока, true);
            диалогВвода.ДобавитьФлаг(толькоОтчетСтрока, false);
            диалогВвода.ДобавитьГруппу("");
            диалогВвода.ДобавитьФлаг(направитьПоПочтеСтрока, false);

            // Если проверка ранее запускалась, то без выбора - только отчет без установки флагов
            if (объектЛога != null)
            {
                диалогВвода[отчетИОбработкаСтрока] = false;
                диалогВвода[толькоОтчетСтрока] = true;
                диалогВвода[направитьПоПочтеСтрока] = false;
                диалогВвода.УстановитьДоступностьЭлемента(отчетИОбработкаСтрока, false);
                диалогВвода.УстановитьДоступностьЭлемента(толькоОтчетСтрока, false);
                диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, false);
            }
            else
            {
                диалогВвода.ЗначениеИзменено += (имяПоля, староеЗначение, новоеЗначение) =>
                {
                    if (имяПоля == отчетИОбработкаСтрока)
                    {
                        if (новоеЗначение == true)
                        {
                            диалогВвода[толькоОтчетСтрока] = false;
                            диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, true);
                        }
                        else
                        {
                            диалогВвода[толькоОтчетСтрока] = true;
                            диалогВвода[направитьПоПочтеСтрока] = false;
                            диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, false);
                        }
                    }
                    if (имяПоля == толькоОтчетСтрока)
                    {
                        if (новоеЗначение == true)
                        {
                            диалогВвода[отчетИОбработкаСтрока] = false;
                            диалогВвода[направитьПоПочтеСтрока] = false;
                            диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, false);
                        }
                        else
                        {
                            диалогВвода[отчетИОбработкаСтрока] = true;
                            диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, true);
                        }
                    }
                };
            }
            диалогВвода.ЗакрытиеДиалога += (bool нажатаКнопкаОк, ref bool закрытьДиалог) =>
            {
                if (!нажатаКнопкаОк)
                {
                    закрытьДиалог = macro.Вопрос("Отменить выполнение?");
                    if (закрытьДиалог)
                    {
                        macro.Сообщение("Внимание!", "Отменено пользователем");
                        отменитьВыполнение = true;
                    }
                }
            };
            if (диалогВвода.Показать())
            {
                толькоОтчет = диалогВвода[толькоОтчетСтрока];
                направитьПоПочте = диалогВвода[направитьПоПочтеСтрока];
            }
            #endregion

            if (!отменитьВыполнение)
            {
                диалогОжидания.Показать("Мониторинг актуальности ТП для объектов ЭСИ", false);
                диалогОжидания.СледующийШаг("Объект " + обозначениеКорневогоОбъекта + ": идет сбор данных...");
                /* Входит Корневой объект и его дочерние объекты (типов Сборочная единица, комплект или деталь),
                   а также исполнения корневого объекта и их дочерние объекты (типов Сборочная единица, комплект или деталь),
                   а также исполнения всех дочерних объектов (если дочерний объект - базовое исполнение) */
                var исполненияКорневогоОбъекта = new List<NomenclatureObject>();
                // Если корневой объект - это базовое исполнение, то записываются все его исполнения, если нет - только сам корневой объект
                if (!((NomenclatureObject)корневойОбъект).IsVersion)
                    исполненияКорневогоОбъекта.AddRange(((NomenclatureObject)корневойОбъект).GetVersions());
                else
                    исполненияКорневогоОбъекта.Add((NomenclatureObject)корневойОбъект);
                // Дочерние объекты исполнений корневого объекта (включая его самого)
                var дочерниеОбъекты = new List<ReferenceObject>();
                исполненияКорневогоОбъекта.ForEach(t => дочерниеОбъекты.AddRange(t.Children.Where(g => типыНоменклатуры.Contains(g.Class.Guid))));
                var дочерниеОбъектыУникальные = дочерниеОбъекты.GroupBy(t => t.SystemFields.Id).Select(g => g.First()).ToList();
                // Дочерние объекты, являющиеся базовыми исполнениями
                var базовыеИсполнения = дочерниеОбъектыУникальные.Where(t => !((NomenclatureObject)t).IsVersion).ToList();
                // Добавление в список ЭСИ для отчета корневого объекта и его исполнений
                объектыИерархии.AddRange(исполненияКорневогоОбъекта.Where(t => типыНоменклатуры.Contains(t.Class.Guid)));
                // Добавление в список ЭСИ для отчета дочерних объектов корневого объекта и дочерних объектов его исполнений
                объектыИерархии.AddRange(дочерниеОбъектыУникальные);
                // Добавление в список ЭСИ для отчета исполнений дочерних объектов, являющихся базовыми исполнениями
                базовыеИсполнения.ForEach(t => объектыИерархии.AddRange(((NomenclatureObject)t).GetVersions()));
                /*if (типыНоменклатуры.Contains(корневойОбъект.Class.Guid))
                    объектыИерархии.Add(корневойОбъект);
                объектыИерархии.AddRange(корневойОбъект.Children.Where(t => типыНоменклатуры.Contains(t.Class.Guid)).ToList());*/
                // Дистинкт по ID объектов номенклатуры
                var объектыНоменклатуры = объектыИерархии.GroupBy(t => t.SystemFields.Id).Select(g => g.First()).ToList();
                // Проверка на вхождение объектов ЭСИ в стоп-лист
                var проверяемыеОбъекты = reader.ПолучитьПроверяемыеОбъекты(объектыНоменклатуры);
                // Получение данных для отчета - список ЭСИ, распределенных по ЭСЗ, в которые они входят
                var строкиОтчета = reader.ПолучитьДанныеДляОтчета(проверяемыеОбъекты).OrderBy(t => t.объектЭСЗ_id).ThenBy(t => t.объектЭСИ_обозначение).ToList();
                if (!толькоОтчет)
                {
                    диалогОжидания.СледующийШаг("Объект " + обозначениеКорневогоОбъекта + ": идет установка признаков обновления КД...");
                    // Список ID ЭСЗ, в которые входит корневой объект и его исполнения                    
                    var исполненияКорневогоОбъекта_ID = исполненияКорневогоОбъекта.Select(t => t.SystemFields.Id).ToList();
                    var объектыЭСЗ_ID = строкиОтчета.Where(t => исполненияКорневогоОбъекта_ID.Contains(t.объектЭСИ_id)).Select(t => t.объектЭСЗ_id).Distinct().ToList();
                    // var объектыЭСЗ_ID = строкиОтчета.Where(t => t.объектЭСИ_id == корневойОбъект.SystemFields.Id).Select(t => t.объектЭСЗ_id).Distinct().ToList();
                    maker.УстановитьПризнакиЭСЗ(объектыЭСЗ_ID, true);
                    // Запись в лог запуска корневого объекта и его исполнений (если корневой объект - базовое исполнение)
                    var обозначенияИсполнений = исполненияКорневогоОбъекта.Select(t => t[Guids.Номенклатура.Поля.обозначение].ToString()).ToList();
                    foreach (var обозначениеИсполнения in обозначенияИсполнений)
                    {
                        // Поиск в логах запуска, запускалась ли проверка по этому объекту ранее
                        var логЗапуска = macro.НайтиОбъект(Guids.ЛогЗапусков.id.ToString(), String.Format("{0} = {1} И {2} = '{3}'",
                                                           Guids.ЛогЗапусков.Поля.этоИзвещение.ToString(), false,
                                                           Guids.ЛогЗапусков.Поля.обозначение, обозначениеИсполнения));
                        if (логЗапуска == null)
                            maker.СоздатьЗаписьВЛогЗапуска(обозначениеИсполнения, false);
                    }
                }
                // Получение списка ID объектов ЭСИ c неактуальными ТП
                var объектыСНеактуальнымиТП_ID = reader.ПолучитьIDОбъектовСНеактуальнымиТП(проверяемыеОбъекты, номенклатураСправочник);
                if (объектыСНеактуальнымиТП_ID.Count == 0)
                {
                    диалогОжидания.Скрыть();
                    macro.Сообщение("Внимание!", "В составе выбранного объекта отсутствуют\r\nобъекты ЭСИ с неактуальными ТП (или без ТП).\r\nФормирование отчета не требуется.");
                    return;
                }
                // Установление признака неактуальности ТП для объектов ЭСИ
                if (!толькоОтчет)
                {
                    диалогОжидания.СледующийШаг("Объект " + обозначениеКорневогоОбъекта + ": идет проверка актуальности ТП...");
                    // Флаги неактуальности ТП устанавливаются для объектов ЭСИ, ID которых входят в список неактуальных ТП
                    maker.УстановитьФлагиНеактуальностиТП(проверяемыеОбъекты.Where(t => объектыСНеактуальнымиТП_ID.Contains(t.SystemFields.Id)).ToList());
                }
                диалогОжидания.СледующийШаг("Объект " + обозначениеКорневогоОбъекта + ": идет формирование отчета...");
                // Отчет формируется только для тех строк отчета, которые включают ID объектов ЭСИ с неактуальными ТП
                maker.СформироватьОтчет(строкиОтчета.Where(t => объектыСНеактуальнымиТП_ID.Contains(t.объектЭСИ_id)).ToList(), текущийОбъект.Справочник.УникальныйИдентификатор, направитьПоПочте);
                диалогОжидания.Скрыть();
            }
        }
        #endregion

        #region Обработка объекта справочника Извещения об изменении
        public static void GenerateFromDocumentMod(MacroProvider macro)
        {
            var текущийОбъект = macro.ТекущийОбъект;
            var типыНоменклатуры = new List<Guid> { Guids.Номенклатура.Типы.комплект,
                                                    Guids.Номенклатура.Типы.сборочнаяЕдиница,
                                                    Guids.Номенклатура.Типы.деталь };
            var reader = new DataReader(macro);
            var maker = new ReportMaker(macro);

            var номенклатураInfo = ServerGateway.Connection.ReferenceCatalog.Find(Guids.Номенклатура.id);
            var номенклатураСправочник = номенклатураInfo.CreateReference();
            var связьТехПроцессы = номенклатураСправочник.LoadSettings.AddRelation(Guids.Номенклатура.Связи.техПроцессы);

            var корневойОбъект = (ReferenceObject)текущийОбъект;
            var обозначениеКорневогоОбъекта = корневойОбъект[Guids.Извещения.Поля.обозначение].GetString();
            // Поиск в логах запуска, запускалась ли проверка по этому объекту ранее
            var объектЛога = macro.НайтиОбъект(Guids.ЛогЗапусков.id.ToString(), String.Format("{0} = {1} И {2} = '{3}'",
                                               Guids.ЛогЗапусков.Поля.этоИзвещение.ToString(), true,
                                               Guids.ЛогЗапусков.Поля.обозначение, обозначениеКорневогоОбъекта));
            if (объектЛога != null)
            {
                if (!macro.Вопрос("По объекту " + обозначениеКорневогоОбъекта + " проверка ранее уже запускалась." +
                             "\r\nБудет сделан только отчет без установки флагов.\r\nХотите продолжить?"))
                {
                    return;
                }
            }

            var объектыИерархии = new List<ReferenceObject>();
            var диалогОжидания = macro.ДиалогОжидания;

            #region Создание диалога ввода
            var диалогВвода = macro.СоздатьДиалогВвода("Введите параметры проверки / отчета");

            var толькоОтчет = false;
            var направитьПоПочте = false;
            var отменитьВыполнение = false;

            var толькоОтчетСтрока = "Только отчет";
            var отчетИОбработкаСтрока = "Отчет и установка признаков неактуальности ТП";
            var направитьПоПочтеСтрока = "Направить данные в отдел 60";

            диалогВвода.ДобавитьГруппу("Режим отчета");
            диалогВвода.ДобавитьФлаг(отчетИОбработкаСтрока, true);
            диалогВвода.ДобавитьФлаг(толькоОтчетСтрока, false);
            диалогВвода.ДобавитьГруппу("");
            диалогВвода.ДобавитьФлаг(направитьПоПочтеСтрока, false);

            // Если проверка ранее запускалась, то без выбора - только отчет без установки флагов
            if (объектЛога != null)
            {
                диалогВвода[отчетИОбработкаСтрока] = false;
                диалогВвода[толькоОтчетСтрока] = true;
                диалогВвода[направитьПоПочтеСтрока] = false;
                диалогВвода.УстановитьДоступностьЭлемента(отчетИОбработкаСтрока, false);
                диалогВвода.УстановитьДоступностьЭлемента(толькоОтчетСтрока, false);
                диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, false);
            }
            else
            {
                диалогВвода.ЗначениеИзменено += (имяПоля, староеЗначение, новоеЗначение) =>
                {
                    if (имяПоля == отчетИОбработкаСтрока)
                    {
                        if (новоеЗначение == true)
                        {
                            диалогВвода[толькоОтчетСтрока] = false;
                            диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, true);
                        }
                        else
                        {
                            диалогВвода[толькоОтчетСтрока] = true;
                            диалогВвода[направитьПоПочтеСтрока] = false;
                            диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, false);
                        }
                    }
                    if (имяПоля == толькоОтчетСтрока)
                    {
                        if (новоеЗначение == true)
                        {
                            диалогВвода[отчетИОбработкаСтрока] = false;
                            диалогВвода[направитьПоПочтеСтрока] = false;
                            диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, false);
                        }
                        else
                        {
                            диалогВвода[отчетИОбработкаСтрока] = true;
                            диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, true);
                        }
                    }
                };
            }
            диалогВвода.ЗакрытиеДиалога += (bool нажатаКнопкаОк, ref bool закрытьДиалог) =>
            {
                if (!нажатаКнопкаОк)
                {
                    закрытьДиалог = macro.Вопрос("Отменить выполнение?");
                    if (закрытьДиалог)
                    {
                        macro.Сообщение("Внимание!", "Отменено пользователем");
                        отменитьВыполнение = true;
                    }
                }
            };
            if (диалогВвода.Показать())
            {
                толькоОтчет = диалогВвода[толькоОтчетСтрока];
                направитьПоПочте = диалогВвода[направитьПоПочтеСтрока];
            }
            #endregion

            // Для чтения объектов по связи порциями
            var сдвиг = 0;
            if (!отменитьВыполнение)
            {
                диалогОжидания.Показать("Мониторинг актуальности ТП для объектов ЭСИ", false);
                диалогОжидания.СледующийШаг("Объект " + обозначениеКорневогоОбъекта + ": идет сбор данных о составе...");
                /* Входят объекты ЭСИ, перечисленные в извещении (типов Сборочная единица, комплект, деталь),
                   а также объекты ЭСИ (тех же типов), в состав которых входят документы, перечисленные в извещении,
                   а также все исполнения объектов ЭСИ, входящих в извещение, являющихся базовыми исполнениями */
                var извещенияInfo = ServerGateway.Connection.ReferenceCatalog.Find(Guids.Извещения.id);
                var извещенияСправочник = извещенияInfo.CreateReference();
                var связьНоменклатура = извещенияСправочник.LoadSettings.AddRelation(Guids.Извещения.Связи.изменяемыеОбъекты);
                // Загрузка связей с номенклатурой
                извещенияСправочник.LoadLinks(new List<ReferenceObject> { корневойОбъект }, извещенияСправочник.LoadSettings);
                // Получение объектов ЭСИ по связи Изменяемые объекты извещения
                var изменяемыеОбъекты = корневойОбъект.GetObjects(Guids.Извещения.Связи.изменяемыеОбъекты).ToList();
                while (сдвиг <= изменяемыеОбъекты.Count)
                {
                    var изменяемыеОбъектыПорция = изменяемыеОбъекты.Skip(сдвиг).Take(Settings.сдвиг).ToList();
                    if (изменяемыеОбъектыПорция.Count > 0)
                    {
                        // Объекты извещения (типов Сборочная единица, комплект, деталь)
                        var объектыИзвещения = изменяемыеОбъектыПорция.Where(t => типыНоменклатуры.Contains(t.Class.Guid)).ToList();
                        // Объекты извещения типа Документ
                        var объектыДокументы = изменяемыеОбъектыПорция.Where(t => t.Class.Guid == Guids.Номенклатура.Типы.документ &&
                                               Regex.Match(t[Guids.Номенклатура.Поля.обозначение].GetString(), Settings.требуемыеДокументыRegex).Success).ToList();
                        // Добавление в список объектов ЭСИ для отчета объектов, входящих в извещение (сборочная единица, комплект, деталь)
                        объектыИзвещения.ForEach(t => объектыИерархии.Add(t));
                        // Добавление в список объектов ЭСИ для отчета родительских объектов документов (тех же типов)
                        объектыДокументы.ForEach(t => объектыИерархии.AddRange(t.Parents.Where(g => типыНоменклатуры.Contains(g.Class.Guid)).ToList()));
                        // Базовые исполнения списка объектов ЭСИ для отчета
                        var базовыеИсполнения = объектыИерархии.Where(t => !((NomenclatureObject)t).IsVersion).GroupBy(t => t.SystemFields.Id)
                                                 .Select(g => g.First()).ToList();
                        // Добавление в список объектов ЭСИ для отчета всех исполнений по базовым исполнениям
                        базовыеИсполнения.ForEach(t => объектыИерархии.AddRange(((NomenclatureObject)t).GetVersions()));
                    }
                    сдвиг += Settings.сдвиг;
                }
                // Дистинкт по ID списка объектов ЭСИ
                var объектыНоменклатуры = объектыИерархии.GroupBy(t => t.SystemFields.Id).Select(g => g.First()).ToList();
                // Проверка на вхождение объектов ЭСИ в стоп-лист
                var проверяемыеОбъекты = reader.ПолучитьПроверяемыеОбъекты(объектыНоменклатуры);
                // Получение данных для отчета - список ЭСИ, входящих в извещение, распределенных по ЭСЗ, в которые они входят
                var строкиОтчета = reader.ПолучитьДанныеДляОтчета(проверяемыеОбъекты).OrderBy(t => t.объектЭСЗ_id).ThenBy(t => t.объектЭСИ_обозначение).ToList();
                if (!толькоОтчет)
                {
                    диалогОжидания.СледующийШаг("Объект " + обозначениеКорневогоОбъекта + ": идет установка признаков обновления КД...");
                    var объектыЭСЗ_ID = строкиОтчета.Select(t => t.объектЭСЗ_id).Distinct().ToList();
                    maker.УстановитьПризнакиЭСЗ(объектыЭСЗ_ID, true);
                    // Если запись в лог запуска отсутствует - создать запись в лог
                    if (объектЛога == null)
                        maker.СоздатьЗаписьВЛогЗапуска(обозначениеКорневогоОбъекта, true);
                }
                if (проверяемыеОбъекты.Count == 0)
                {
                    диалогОжидания.Скрыть();
                    macro.Сообщение("Внимание!", "В составе выбранного объекта отсутствуют\r\nобъекты ЭСИ с неактуальными ТП (или без ТП).\r\nФормирование отчета не требуется.");
                    return;
                }
                // Установление признака неактуальности ТП для объектов ЭСИ
                if (!толькоОтчет)
                {
                    диалогОжидания.СледующийШаг("Объект " + обозначениеКорневогоОбъекта + ": идет проверка актуальности ТП...");
                    maker.УстановитьФлагиНеактуальностиТП(проверяемыеОбъекты);
                }
                диалогОжидания.СледующийШаг("Объект " + обозначениеКорневогоОбъекта + ": идет формирование отчета...");
                // Формируется отчет в Excel
                maker.СформироватьОтчет(строкиОтчета, текущийОбъект.Справочник.УникальныйИдентификатор, направитьПоПочте);
                диалогОжидания.Скрыть();
            }
        }
        #endregion

        #region Обработка объектов справочника Структура заказов
        public static void GenerateFromOrderStructure(MacroProvider macro)
        {
            var текущийОбъект = macro.ТекущийОбъект;
            var reader = new DataReader(macro);
            var maker = new ReportMaker(macro);

            var диалогОжидания = macro.ДиалогОжидания;
            var диалогВвода = macro.СоздатьДиалогВвода("Введите параметры проверки / отчета");

            var толькоОтчетСтрока = "Только отчет";
            var отчетИОбработкаСтрока = "Отчет и установка признаков неактуальности ТП";
            var отчетВыбранныеЭСЗСтрока = "Отчет по выбранным ЭСЗ";
            var отчетВыгружаемыеЭСЗСтрока = "Отчет по всем ЭСЗ, выгружаемым в 1С";
            var направитьПоПочтеСтрока = "Направить данные в отдел 60";
            var снятьФлагКдИзмененаСтрока = "Снять флаг \"КД изменена\"";

            // Диалог, позволяющий выбрать режим работы отчета - для выбранной ЭСЗ или для всех ЭСЗ, выгружаемых в 1С
            диалогВвода.ДобавитьГруппу("Режим отчета");
            диалогВвода.ДобавитьФлаг(отчетИОбработкаСтрока, true);
            диалогВвода.ДобавитьФлаг(толькоОтчетСтрока, false);
            диалогВвода.ДобавитьГруппу("Данные отчета");
            диалогВвода.ДобавитьФлаг(отчетВыбранныеЭСЗСтрока, true);
            диалогВвода.ДобавитьФлаг(отчетВыгружаемыеЭСЗСтрока, false);
            диалогВвода.ДобавитьГруппу("");
            диалогВвода.ДобавитьФлаг(снятьФлагКдИзмененаСтрока, false);
            диалогВвода.ДобавитьФлаг(направитьПоПочтеСтрока, false);

            var толькоОтчет = false;
            var всеВыгружаемыеЭСЗ = false;
            var направитьПоПочте = false;
            var отменитьВыполнение = false;
            var снятьФлагКдИзменена = false;

            диалогВвода.ЗначениеИзменено += (имяПоля, староеЗначение, новоеЗначение) =>
            {
                if (имяПоля == отчетВыгружаемыеЭСЗСтрока)
                {
                    if (новоеЗначение == true)
                        диалогВвода[отчетВыбранныеЭСЗСтрока] = false;
                    else
                        диалогВвода[отчетВыбранныеЭСЗСтрока] = true;
                }
                if (имяПоля == отчетВыбранныеЭСЗСтрока)
                {
                    if (новоеЗначение == true)
                        диалогВвода[отчетВыгружаемыеЭСЗСтрока] = false;
                    else
                        диалогВвода[отчетВыгружаемыеЭСЗСтрока] = true;
                }
                if (имяПоля == отчетИОбработкаСтрока)
                {
                    if (новоеЗначение == true)
                    {
                        диалогВвода[толькоОтчетСтрока] = false;
                        диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, true);
                        диалогВвода.УстановитьДоступностьЭлемента(снятьФлагКдИзмененаСтрока, true);

                    }
                    else
                    {
                        диалогВвода[толькоОтчетСтрока] = true;
                        диалогВвода[направитьПоПочтеСтрока] = false;
                        диалогВвода[снятьФлагКдИзмененаСтрока] = false;
                        диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, false);
                        диалогВвода.УстановитьДоступностьЭлемента(снятьФлагКдИзмененаСтрока, false);
                    }
                }
                if (имяПоля == толькоОтчетСтрока)
                {
                    if (новоеЗначение == true)
                    {
                        диалогВвода[отчетИОбработкаСтрока] = false;
                        диалогВвода[направитьПоПочтеСтрока] = false;
                        диалогВвода[снятьФлагКдИзмененаСтрока] = false;
                        диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, false);
                        диалогВвода.УстановитьДоступностьЭлемента(снятьФлагКдИзмененаСтрока, false);
                    }
                    else
                    {
                        диалогВвода[отчетИОбработкаСтрока] = true;
                        диалогВвода.УстановитьДоступностьЭлемента(направитьПоПочтеСтрока, true);
                        диалогВвода.УстановитьДоступностьЭлемента(снятьФлагКдИзмененаСтрока, true);
                    }
                }
            };
            диалогВвода.ЗакрытиеДиалога += (bool нажатаКнопкаОк, ref bool закрытьДиалог) =>
            {
                if (!нажатаКнопкаОк)
                {
                    закрытьДиалог = macro.Вопрос("Отменить выполнение?");
                    if (закрытьДиалог)
                    {
                        macro.Сообщение("Внимание!", "Отменено пользователем");
                        отменитьВыполнение = true;
                    }
                }
            };
            if (диалогВвода.Показать())
            {
                всеВыгружаемыеЭСЗ = диалогВвода[отчетВыгружаемыеЭСЗСтрока];
                направитьПоПочте = диалогВвода[направитьПоПочтеСтрока];
                толькоОтчет = диалогВвода[толькоОтчетСтрока];
                снятьФлагКдИзменена = диалогВвода[снятьФлагКдИзмененаСтрока];
            }
            if (!отменитьВыполнение)
            {
                диалогОжидания.Показать("Мониторинг актуальности ТП для объектов ЭСИ", false);
                диалогОжидания.СледующийШаг("Идет сбор данных об объектах ЭСЗ и их составе...");

                var объектыЭСЗ_ID = new List<int>();
                var строкиОтчета = new List<СтрокаОтчета>();
                if (всеВыгружаемыеЭСЗ)
                {
                    // Все объекты ЭСЗ с незакрытым номером заказа, у которых установлен флаг "Выгружать в 1С"
                    var выгружаемыеОбъекты = macro.НайтиОбъекты(Guids.СтруктурыЗаказов.id.ToString(), Guids.СтруктурыЗаказов.Поля.выгрузитьв1С.ToString(), true)
                        .Where(t => t.СвязанныйОбъект[Guids.СтруктурыЗаказов.Связи.номерЗаказа.ToString()]!= null 
                                && !t.СвязанныйОбъект[Guids.СтруктурыЗаказов.Связи.номерЗаказа.ToString()]
                                                     [Guids.НомераЗаказов.Поля.заказЗакрыт.ToString()]);
                    объектыЭСЗ_ID = выгружаемыеОбъекты.Select(t => ((ReferenceObject)t).SystemFields.Id).ToList();
                    // Данные обо всех объектах ЭСИ с неактуальными ТП, входящих в выгружаемые в 1С ЭСЗ
                    строкиОтчета = reader.ПолучитьДанныеДляОтчетаИзВыгружаемыхЭСЗ();
                }
                else
                {
                    // Выбранные для проверки объекты ЭСЗ с незакрытым номером заказа
                    объектыЭСЗ_ID = macro.SelectedObjects.Where(t => t.СвязанныйОбъект[Guids.СтруктурыЗаказов.Связи.номерЗаказа.ToString()] != null 
                                                                 && !t.СвязанныйОбъект[Guids.СтруктурыЗаказов.Связи.номерЗаказа.ToString()]
                                                                                      [Guids.НомераЗаказов.Поля.заказЗакрыт.ToString()])
                    .Select(t => ((ReferenceObject)t).SystemFields.Id).ToList();
                    // Данные обо всех объектах ЭСИ с неактуальными ТП, входящих в состав выбранных ЭСЗ
                    foreach (var объектЭСЗ_ID in объектыЭСЗ_ID)
                    {
                        строкиОтчета.AddRange(reader.ПолучитьДанныеДляОтчетаИзВыгружаемыхЭСЗ(объектЭСЗ_ID));
                    }
                }
                // Снимаются признаки обновления КД у всех проверяемых ЭСЗ
                if (снятьФлагКдИзменена)
                {
                    диалогОжидания.СледующийШаг("Выбранные объекты ЭСЗ: идет снятие признаков обновления КД...");
                    maker.СнятьФлагиКдИзмененаЭСЗ(объектыЭСЗ_ID);
                }
                if (строкиОтчета.Count > 0)
                {
                    if (!толькоОтчет)
                    {
                        диалогОжидания.СледующийШаг("Выбранные объекты ЭСЗ: идет проверка актуальности ТП...");
                        // Устанавливаются признаки неактуальности ТП как для объектов ЭСЗ, так и входящих в них ЭСИ с неактуальными ТП
                        maker.УстановкаПризнаковНеактуальностиЭСИиЭСЗ(строкиОтчета);
                        // Снимаются признаки неактуальности ТП для объектов ЭСЗ из списка выбранных, которых нет в данных для отчета
                        maker.СнятьПризнакиНеактуальностиЭСЗ(объектыЭСЗ_ID, строкиОтчета);
                    }
                    диалогОжидания.СледующийШаг("Выбранные объекты ЭСЗ: идет формирование отчета...");
                    // Формируется отчет в Excel
                    maker.СформироватьОтчет(строкиОтчета, текущийОбъект.Справочник.УникальныйИдентификатор, направитьПоПочте);
                    диалогОжидания.Скрыть();
                }
                else
                {
                    // Снимаются признаки неактуальности для всех объектов ЭСЗ из списка выбранных
                    if (!толькоОтчет)
                    {
                        диалогОжидания.СледующийШаг("Выбранные объекты ЭСЗ: идет проверка актуальности ТП...");
                        maker.СнятьПризнакиНеактуальностиЭСЗ(объектыЭСЗ_ID, строкиОтчета);
                    }
                    диалогОжидания.Скрыть();
                    macro.Сообщение("Внимание!", "В составе выбранных объектов ЭСЗ отсутствуют\r\nобъекты ЭСИ с неактуальными ТП (или без ТП).\r\nФормирование отчета не требуется.");
                }
            }
        }
        #endregion

        #region Установка флагов выгрузки в 1С при утверждении ТП
        public static void AllowStructureLoading(MacroProvider macro)
        {
            var диалогОжидания = macro.ДиалогОжидания;
            диалогОжидания.Показать("Установка флагов выгрузки в 1С...", false);
            диалогОжидания.СледующийШаг("Идет сбор данных...");
            var reader = new DataReader(macro);
            var maker = new ReportMaker(macro);
            // Поиск объектов в справочнике утвержденных ТП
            var найденныеОбъекты = macro.НайтиОбъекты(Guids.ЭСИсУтвержденнымиТП.id.ToString(), string.Format("{0} = {1}", 
                                                Guids.ЭСИсУтвержденнымиТП.Поля.учтен.ToString(), false));
            if (найденныеОбъекты.Count() == 0)
            {
                диалогОжидания.Скрыть();
                macro.Сообщение("Внимание!", "На данный момент новые объекты ЭСИ\r\nс утвержденными ТП отсутствуют");
                return;
            }
            // ID объектов номенклатуры
            var объектыЭСИ_ID = найденныеОбъекты.Select(t => (int)t[Guids.ЭСИсУтвержденнымиТП.Поля.ID_номенклатуры.ToString()]).ToList();
            // Проверяемые объекты ЭСИ
            var проверяемыеОбъекты = macro.НайтиОбъекты(Guids.Номенклатура.id.ToString(), 
                             string.Format("[ID] входит в список {0}", string.Join(",", объектыЭСИ_ID))).Select(t => (ReferenceObject)t).ToList();
            // Получение данных для отчета - список ЭСИ, распределенных по ЭСЗ, в которые они входят
            var строкиОтчета = reader.ПолучитьДанныеДляОтчета(проверяемыеОбъекты).OrderBy(t => t.объектЭСЗ_id).ThenBy(t => t.объектЭСИ_обозначение).ToList();
            // Список ID ЭСЗ, в которые входят проверяемые объекты
            var объектыЭСЗ_ID = строкиОтчета.Select(t => t.объектЭСЗ_id).Distinct().ToList();
            диалогОжидания.СледующийШаг("Идет установка флагов выгрузки в 1С...");
            maker.УстановитьПризнакиЭСЗ(объектыЭСЗ_ID, false);
            maker.УстановитьФлагиУчтен(найденныеОбъекты);
            диалогОжидания.Скрыть();
            macro.Сообщение("Успешно!", "Обработано объектов ЭСИ с утвержденными ТП - " + найденныеОбъекты.Count + 
                                        "\r\nУстановлено к выгрузке в 1С ЭСЗ - " + объектыЭСЗ_ID.Count);
        }
        #endregion
    }
}